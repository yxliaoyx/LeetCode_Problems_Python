class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        visited = [False] * len(graph)
        node_to_component = {}
        components = []

        def dfs(node, idx):
            visited[node] = True
            node_to_component[node] = idx
            components[idx].append(node)
            for neighbor, connected in enumerate(graph[node]):
                if connected and not visited[neighbor]:
                    dfs(neighbor, idx)

        for i in range(len(graph)):
            if not visited[i]:
                components.append([])
                dfs(i, len(components) - 1)

        infected_count = [0] * len(components)
        for node in initial:
            infected_count[node_to_component[node]] += 1

        answer = min(initial)
        max_saved = 0
        for node in initial:
            idx = node_to_component[node]
            if infected_count[idx] == 1:
                saved = len(components[idx])
                if saved > max_saved or (saved == max_saved and node < answer):
                    max_saved = saved
                    answer = node

        return answer
